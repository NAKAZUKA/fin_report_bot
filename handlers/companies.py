from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from db import add_user_company, remove_user_company, list_user_companies
from clients.interfax_client import interfax_client
from db import get_db
from keyboards.main import main_menu

router = Router()

class CompanyStates(StatesGroup):
    waiting_for_inn = State()

def companies_keyboard(companies: list[dict]) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=f"‚ùå {c['company_name']} ({c['inn']})", callback_data=f"del_company_{c['inn']}")]
        for c in companies
    ]
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_company")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(F.data == "manage_companies")
async def manage_companies(callback: types.CallbackQuery):
    companies = list_user_companies(callback.from_user.id)
    if companies:
        await callback.message.edit_text("üìÑ <b>–í–∞—à–∏ –∫–æ–º–ø–∞–Ω–∏–∏</b>:", reply_markup=companies_keyboard(companies))
    else:
        await callback.message.edit_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é:",
                                         reply_markup=companies_keyboard([]))
    await callback.answer()

@router.callback_query(F.data == "add_company")
async def ask_inn(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∏–ª–∏ –û–ì–†–ù –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(CompanyStates.waiting_for_inn)
    await callback.answer()

@router.message(CompanyStates.waiting_for_inn)
async def handle_inn_input(message: types.Message, state: FSMContext):
    code = message.text.strip()

    try:
        subject = await interfax_client.probe_company_info(code)
        if not subject:
            await message.answer("‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∏–ª–∏ –û–ì–†–ù:")
            return  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è

        name = subject.get("shortName") or subject.get("fullName") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        inn = subject.get("inn", code)
        ogrn = subject.get("ogrn", "")
        add_user_company(message.from_user.id, inn=inn, name=name, ogrn=ogrn)

        companies = list_user_companies(message.from_user.id)
        await message.answer(
            f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n\nüìÑ <b>–í–∞—à —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π:</b>",
            reply_markup=companies_keyboard(companies)
        )
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        await state.clear()

@router.callback_query(F.data.startswith("del_company_"))
async def delete_company(callback: types.CallbackQuery):
    inn = callback.data.split("_")[2]
    remove_user_company(callback.from_user.id, inn)
    companies = list_user_companies(callback.from_user.id)
    await callback.message.edit_text("üìÑ <b>–û–±–Ω–æ–≤–ª—ë–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π</b>:", reply_markup=companies_keyboard(companies))
    await callback.answer()

@router.callback_query(F.data == "back_to_menu")
async def back_to_main(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    with get_db() as conn:
        res = conn.execute("SELECT is_subscribed FROM users WHERE user_id = ?", (user_id,)).fetchone()
        is_sub = bool(res["is_subscribed"]) if res else False

    await callback.message.edit_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(is_sub))
    await callback.answer()