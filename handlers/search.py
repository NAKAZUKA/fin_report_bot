from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import json
from pathlib import Path

from clients.interfax_client import interfax_client
from keyboards.main import main_menu

router = Router()

COMPANIES_PATH = Path(__file__).parent.parent.parent / "data" / "companies.json"
with open(COMPANIES_PATH, encoding="utf-8") as f:
    COMPANIES: dict[str, str] = json.load(f)

class SearchStates(StatesGroup):
    choosing_company = State()
    choosing_type = State()
    choosing_year = State()
    showing_results = State()

def company_list_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"choose_company_{inn}")]
        for name, inn in COMPANIES.items()
    ]
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def type_list_keyboard(types: list[dict], page: int = 0, per_page: int = 20) -> InlineKeyboardMarkup:
    start = page * per_page
    end = start + per_page
    visible = types[start:end]

    buttons = [
        [InlineKeyboardButton(text=t["name"], callback_data=f"choose_type_{t['id']}")]
        for t in visible
    ]

    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"types_page_{page-1}"))
    if end < len(types):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"types_page_{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)

    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def year_list_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(y), callback_data=f"choose_year_{y}")]
        for y in range(2024, 2018, -1)
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")]])

def make_reports_keyboard(events: list[dict], page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    start = page * per_page
    end = start + per_page
    buttons = []

    for e in events[start:end]:
        report_type = e["file"]["type"]["name"]
        pub_date = e["file"]["attributes"].get("DatePub", "??")
        url = e["file"]["publicUrl"]
        buttons.append([
            InlineKeyboardButton(text=f"{report_type} ‚Äî {pub_date}", url=url)
        ])

    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if end < len(events):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"page_{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)

    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_search")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(F.data == "search_reports")
async def start_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=company_list_keyboard())
    await state.set_state(SearchStates.choosing_company)
    await callback.answer()

@router.callback_query(F.data.startswith("choose_company_"))
async def choose_company(callback: CallbackQuery, state: FSMContext):
    inn = callback.data.split("_")[2]
    await state.update_data(inn=inn)
    await callback.message.edit_text("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ (–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏)
        types = await interfax_client.get_file_types()
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤: {e}")
        return

    await state.update_data(types=types)
    await state.set_state(SearchStates.choosing_type)
    await callback.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏:", reply_markup=type_list_keyboard(types))
    await callback.answer()

@router.callback_query(F.data.startswith("choose_type_"))
async def choose_type(callback: CallbackQuery, state: FSMContext):
    type_id = int(callback.data.split("_")[2])
    await state.update_data(file_type_id=type_id)
    await callback.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=year_list_keyboard())
    await state.set_state(SearchStates.choosing_year)
    await callback.answer()

@router.callback_query(F.data.startswith("choose_year_"))
async def choose_year(callback: CallbackQuery, state: FSMContext):
    year = int(callback.data.split("_")[2])  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    inn = data["inn"]  # –ü–æ–ª—É—á–∞–µ–º –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏
    file_type_id = data["file_type_id"]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    company_name = next((name for name, code in COMPANIES.items() if code == inn), "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è")

    await callback.message.edit_text("‚è≥ –ò—â–µ–º –æ—Ç—á—ë—Ç—ã...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∏ –≥–æ–¥—É
        events = await interfax_client.get_filtered_reports(subject_code=inn, file_type=file_type_id, year=year)
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return

    if not events:
        await callback.message.edit_text(
            f"‚õîÔ∏è –û—Ç—á—ë—Ç—ã –∑–∞ {year} –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ <b>{company_name}</b>.",
            reply_markup=main_menu(True)
        )
        return

    await state.update_data(events=events, page=0, company_name=company_name)
    await state.set_state(SearchStates.showing_results)

    text = (
        f"üì• <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã</b> –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ <b>{company_name}</b>:\n"
        f"–í—Å–µ–≥–æ: {len(events)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
    )

    await callback.message.edit_text(text, reply_markup=make_reports_keyboard(events, page=0))
    await callback.message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(True))
    await callback.answer()

@router.callback_query(F.data == "cancel_search")
async def cancel_search(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω—É–∂–Ω–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    from db import get_db
    is_sub = False
    with get_db() as conn:
        res = conn.execute(
            "SELECT is_subscribed FROM users WHERE user_id = ?", (callback.from_user.id,)
        ).fetchone()
        is_sub = bool(res["is_subscribed"]) if res else False

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é
    await callback.message.edit_text(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu(is_sub)
    )
    await callback.answer()
