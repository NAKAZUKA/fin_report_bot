from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from keyboards.main import main_menu
from db import get_db

router = Router()


def is_user_subscribed(user_id: int) -> bool:
    with get_db() as conn:
        res = conn.execute(
            "SELECT is_subscribed FROM users WHERE user_id = ?", (user_id,)
        ).fetchone()
        return bool(res["is_subscribed"]) if res else False


def set_subscription(user_id: int, full_name: str, subscribed: bool):
    with get_db() as conn:
        conn.execute(
            """
            INSERT INTO users (user_id, full_name, is_subscribed)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET is_subscribed = excluded.is_subscribed
        """,
            (user_id, full_name, int(subscribed)),
        )


@router.message(Command("start"))
async def start_cmd(message: types.Message):
    is_sub = is_user_subscribed(message.from_user.id)

    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å.\n\n"
        f"üì© <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</b>: {'‚úÖ –ø–æ–¥–ø–∏—Å–∞–Ω—ã' if is_sub else '‚ùå –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã'}"
    )

    sent = await message.answer(text, reply_markup=main_menu(is_sub))
    await message.delete()


@router.callback_query(lambda c: c.data in ("subscribe", "unsubscribe"))
async def toggle_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    full_name = callback.from_user.full_name
    want_sub = callback.data == "subscribe"

    set_subscription(user_id, full_name, want_sub)

    text = (
        f"‚úÖ –í—ã {'–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞' if want_sub else '–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç'} —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏.\n\n"
        f"üì© <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å</b>: {'‚úÖ –ø–æ–¥–ø–∏—Å–∞–Ω—ã' if want_sub else '‚ùå –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã'}"
    )

    await callback.message.edit_text(text, reply_markup=main_menu(want_sub))
    await callback.answer()


@router.callback_query(lambda c: c.data == "about_bot")
async def about_bot(callback: CallbackQuery):
    is_sub = is_user_subscribed(callback.from_user.id)
    await callback.message.edit_text(
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"
        "üìä –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ API –ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å–∞.\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –¥–∞—Ç–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
        reply_markup=main_menu(is_sub),
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "terms")
async def terms(callback: CallbackQuery):
    is_sub = is_user_subscribed(callback.from_user.id)
    await callback.message.edit_text(
        "üìÑ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</b>\n\n"
        "–ü–æ–¥–ø–∏—Å—ã–≤–∞—è—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "
        "–æ –Ω–æ–≤—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–π.\n\n"
        "–ò—Å—Ç–æ—á–Ω–∏–∫: [–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å ‚Äì —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏](https://www.e-disclosure.ru)",
        reply_markup=main_menu(is_sub),
        disable_web_page_preview=True,
    )
    await callback.answer()
