# ‚úÖ dispatcher.py

import os
from datetime import datetime

from aiogram import Bot
from aiogram.types import FSInputFile
from loguru import logger

from clients.interfax_client import interfax_client
from db import (
    get_db,
    mark_event_as_processed,
    save_report,
)
from utils.minio_client import upload_file
from utils.cleaner import remove_temp_files


async def process_events(bot: Bot, interfax_client):
    logger.info("üîÅ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ –ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å...")

    with get_db() as conn:
        rows = conn.execute("""
            SELECT u.user_id, u.full_name, c.company_name, c.inn
            FROM users u
            JOIN user_companies c ON u.user_id = c.user_id
            WHERE u.is_subscribed = 1
        """).fetchall()

    user_companies = {}
    for row in rows:
        user_companies.setdefault((row["user_id"], row["full_name"]), []).append((row["company_name"], row["inn"]))

    for (user_id, full_name), companies in user_companies.items():
        for company_name, inn in companies:
            logger.info(f"üîç [{user_id}] {full_name} ‚Äî {company_name} (–ò–ù–ù: {inn})")

            try:
                file_events = await interfax_client.get_file_events(subject_code=inn)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è {company_name}: {e}")
                continue

            for event in file_events:
                uid = event["uid"]
                file_data = event.get("file", {})
                attrs = file_data.get("attributes", {})
                public_url = file_data.get("publicUrl")

                pub_date = attrs.get("DatePub")
                if not pub_date or datetime.strptime(pub_date, "%d.%m.%Y").date() != datetime.utcnow().date():
                    continue

                report_type = file_data.get("type", {}).get("name", "–û—Ç—á—ë—Ç")
                description = file_data.get("description", "") or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

                try:
                    # üîΩ –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
                    paths = await interfax_client.download_and_extract_file(file_data)
                    if not paths:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–π–ª(—ã) –¥–ª—è —Å–æ–±—ã—Ç–∏—è {uid}")
                        continue

                    for idx, file_path in enumerate(paths):
                        filename = os.path.basename(file_path)
                        with open(file_path, "rb") as f:
                            file_bytes = f.read()

                        # ‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤ MinIO
                        minio_url = upload_file(file_bytes, filename)

                        # üíæ –í –ë–î —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                        if idx == 0:
                            save_report(
                                event_uid=uid,
                                company_name=company_name,
                                inn=inn,
                                report_type=report_type,
                                report_date=pub_date,
                                description=description,
                                document_url_in_minio=minio_url
                            )
                            mark_event_as_processed(uid)

                        # üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        caption = (
                            f"üè¢ <b>{company_name}</b>\n"
                            f"üìÑ –¢–∏–ø: <b>{report_type}</b>\n"
                            f"üóì –ì–æ–¥: <b>{attrs.get('YearRep', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
                            f"üóì –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{pub_date}</b>\n"
                            f"üìú {description}"
                        )

                        doc = FSInputFile(path=file_path)
                        await bot.send_document(
                            chat_id=user_id,
                            document=doc,
                            caption=caption,
                            parse_mode="HTML"
                        )
                        logger.success(f"üì§ –§–∞–π–ª {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á—ë—Ç–∞ {uid} –¥–ª—è {company_name}: {e}")
                finally:
                    if 'paths' in locals() and paths:
                        remove_temp_files(paths + [os.path.dirname(paths[0])])

    logger.info("‚úÖ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
